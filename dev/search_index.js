var documenterSearchIndex = {"docs":
[{"location":"specs/#Example-Component-Specifications","page":"Example Component Specifications","title":"Example Component Specifications","text":"","category":"section"},{"location":"specs/","page":"Example Component Specifications","title":"Example Component Specifications","text":"See this paper for details on parameters outlined in the specs below.","category":"page"},{"location":"specs/#Component-Structure","page":"Example Component Specifications","title":"Component Structure","text":"","category":"section"},{"location":"specs/","page":"Example Component Specifications","title":"Example Component Specifications","text":"                     ┌───────┐\n          ┌──────────┤ Basin │\n          │          └───────┘\nhas many  │\n          │\n          │\n     ┌────▼───┐    shares a      ┌─────────┐\n     │  Zone  ├──────────────────► Manager │\n     └───┬────┘                  └─────────┘\n         │\nhas many │ ┌───────┐\n         └─► Field │\n           └┬──────┘\n            │\n            │  Rotates many ┌───────┐\n            ├────────────────► Crop │\n            │               └───────┘\n            │\n            │      has a    ┌────────────┐\n            ├───────────────► Irrigation │\n            │               └────────────┘\n            │\n            │      has      ┌──────┐\n            ├───────────────► Pump │\n            │               └──────┘\n            │\n            │      has      ┌─────────────┐\n            └───────────────► WaterSource │\n                            └─────────────┘","category":"page"},{"location":"specs/#Crop","page":"Example Component Specifications","title":"Crop","text":"","category":"section"},{"location":"specs/","page":"Example Component Specifications","title":"Example Component Specifications","text":"Defines economic and growth parameters (over four stages) for a given crop.","category":"page"},{"location":"specs/","page":"Example Component Specifications","title":"Example Component Specifications","text":"name: irrigated_barley\ncomponent: Crop\ncrop_type: irrigated_cereal\n\n# values below are given as list of\n# nominal \"best guess\" values, min, and max \n# plant_dates are assumed to be static across all seasons.\n# Identical values for all options are treated as constants\nplant_date: [\"CategoricalParameter\", \"05-31\", \"05-31\", \"05-31\"]\nyield_per_ha: [\"RealParameter\", 3.25, 2.5, 7.0]\nprice_per_yield: [\"RealParameter\", 200.0, 100.0, 250.0]\nvariable_cost_per_ha: [\"RealParameter\", 160.0, 120.0, 350.0]\nwater_use_ML_per_ha: [\"RealParameter\", 2.0, 1.5, 3.0]\nroot_depth_m: [\"RealParameter\", 1.0, 0.8, 1.5]\n# values below were calibrated for North-Central Victoria\net_coef: [\"RealParameter\", 170.0, 170.0, 170.0]\nwue_coef: [\"RealParameter\", 11.4552, 11.4552, 11.4552]\nrainfall_threshold: [\"RealParameter\", 466.43204, 466.43204, 466.43204]\nssm_coef: [\"RealParameter\", 0.4, 0.4, 0.4]\n\n# Effective root zone is roughly half to 2/3rds of root depth\n# https://www.bae.ncsu.edu/programs/extension/evans/ag452-1.html\n# http://dpipwe.tas.gov.au/Documents/Soil-water_factsheet_14_12_2011a.pdf\neffective_root_zone: [\"RealParameter\", 0.55, 0.5, 0.66]\ngrowth_stages:\n  # growth stage length are given in days\n  # harvest date is the sum of all stages\n  initial: \n    stage_length: [\"RealParameter\", 20, 20, 20]\n    crop_coefficient: 0.3\n    depletion_fraction: 0.55\n  development: \n    stage_length: [\"RealParameter\", 25, 25, 25]\n    crop_coefficient: 0.3\n    depletion_fraction: 0.55\n  mid_season: \n    stage_length: [\"RealParameter\", 60, 60, 60]\n    crop_coefficient: 1.15\n    depletion_fraction: 0.55\n  late:\n    stage_length: [\"RealParameter\", 30, 30, 30]\n    crop_coefficient: 0.25\n    depletion_fraction: 0.55","category":"page"},{"location":"specs/#Irrigation","page":"Example Component Specifications","title":"Irrigation","text":"","category":"section"},{"location":"specs/","page":"Example Component Specifications","title":"Example Component Specifications","text":"name: gravity\ncomponent: Irrigation\n\n# Cost to install/adopt ($ per ha)\ncapital_cost: [\"RealParameter\", 2000.0, 2000.0, 2500.0]\n\n# water application efficiency\nefficiency: [\"RealParameter\", 0.5, 0.5, 0.9]\n\n# Assumed percentage of capital_cost \nminor_maintenance_rate: [\"RealParameter\", 0.05, 0.05, 0.05]\nmajor_maintenance_rate: [\"RealParameter\", 0.10, 0.10, 0.10]\n\n# Assumed maintenance schedule for minor/major maintenance\n# in years, where 1 is every year, 5 is every 5 years, etc.\nminor_maintenance_schedule: [\"RealParameter\", 1.0, 1.0, 1.0]\nmajor_maintenance_schedule: [\"RealParameter\", 5.0, 5.0, 5.0]\n\n# Assumed average flow rate in ML/day\nflow_ML_day: [\"RealParameter\", 12.0, 12.0, 12.0]\n\n# Range of required head pressure to operate irrigation\nhead_pressure: [\"RealParameter\", 10.0, 8.0, 15.0]","category":"page"},{"location":"specs/#Pump","page":"Example Component Specifications","title":"Pump","text":"","category":"section"},{"location":"specs/","page":"Example Component Specifications","title":"Example Component Specifications","text":"Defines the operational costs of a pumping system for surface water and groundwater. Specs for surface_water and groundwater must be defined.","category":"page"},{"location":"specs/","page":"Example Component Specifications","title":"Example Component Specifications","text":"name: surface_water\ncomponent: Pump\n# surface water pump representing an average mix of\n# 60% diesel and 40% electric pumps\n\n# https://publications.csiro.au/rpr/download?pid=csiro:EP1312979&dsid=DS5\n\ncapital_cost: [\"RealParameter\", 18000.0, 18000.0, 70000.0]\nminor_maintenance_schedule: [\"RealParameter\", 1, 1, 1]\nmajor_maintenance_schedule: [\"RealParameter\", 1, 1, 1]\nminor_maintenance_rate: [\"RealParameter\", 0.005, 0.005, 0.005]\nmajor_maintenance_rate: [\"RealParameter\", 0.005, 0.005, 0.005]\npump_efficiency: 0.7\ncost_per_kW: [\"RealParameter\", 0.285, 0.285, 0.285]\nderating: 0.75","category":"page"},{"location":"specs/#WaterSource","page":"Example Component Specifications","title":"WaterSource","text":"","category":"section"},{"location":"specs/","page":"Example Component Specifications","title":"Example Component Specifications","text":"Defines the cost of accessing a given water source (surface_water and groundwater must be defined).","category":"page"},{"location":"specs/","page":"Example Component Specifications","title":"Example Component Specifications","text":"name: groundwater\ncomponent: WaterSource\n\n# Surface and Groundwater Account fees: http://www.g-mwater.com.au/downloads/gmw/Pricing_Table_June15.pdf\n# Supply costs taken from East Loddon (North)\n\n# Water Share/Entitlements:\n# http://waterregister.vic.gov.au/water-entitlements/entitlement-statistics\n\n# 4C Lower Campaspe, 52, 1633.5ML\n# Pricing:\n# http://www.g-mwater.com.au/customer-services/myaccount/pricingsimulator\n# http://www.g-mwater.com.au/general-information/pricingsimulator\n\n# http://www.g-mwater.com.au/downloads/gmw/Pricing_Table_June15.pdf\n\n# Definitions:\n# http://waterregister.vic.gov.au/about/water-dictionary\n\n# access_fees are sum of the below\n# in $ per service point\n# service: 100.0\n# infrastructure_access: 2714.0\n# service_point: 300\n# service_point_remote_read: 350\n# service_point_remote_operate: 400\n# surface_drainage_service: 100\nyearly_cost: 3964.0\n\n# area_fee ($/Ha): 7.95\ncost_per_ha:  7.95  # ($/ha)\n\n# access_fee: 2.04\n# resource_management_fee: 4.47\n# high_reliability_entitlement: 24.86\n# low_reliability_entitlement: 15.35\n# high_reliability_storage: 10.57\n# low_reliability_storage: 5.18\n# above_entitlement_storage: 15.35\ncost_per_ML: 77.82  # ($/ML)\n\nhead: 25.0  # Initial head (in meters)\nallocation: 50.0  # Initial allocation","category":"page"},{"location":"specs/#FarmZone","page":"Example Component Specifications","title":"FarmZone","text":"","category":"section"},{"location":"specs/","page":"Example Component Specifications","title":"Example Component Specifications","text":"name: Zone_1\ncomponent: FarmZone\n\n# Paths to data, relative to where project is run\nclimate_data: \"test/data/climate/farm_climate_data.csv\"\npump_spec: \"test/data/pumps/\"\n\nfields:\n  field1:\n    name: field1\n    component: CropField\n\n    total_area_ha: 100.0\n    irrigation_spec: \"test/data/irrigations/gravity.yml\"\n\n    # Initial crop is the first one in this list\n    crop_rotation_spec: [\"test/data/crops/irrigated_wheat.yml\", \"test/data/crops/irrigated_barley.yml\"]\n\n    # average soil total available water (mm)\n    soil_TAW: 100.0\n\n    # Initial Soil Water Deficit\n    soil_SWD: 20.0\n\nwater_sources:\n  surface_water:\n    name: surface_water\n    component: WaterSource\n    # Surface and Groundwater Account fees: http://www.g-mwater.com.au/downloads/gmw/Pricing_Table_June15.pdf\n    # Supply costs taken from East Loddon (North)\n\n    # Average volume per licence for the lower Campaspe is ~407ML\n    # (56.2GL / 138 Licences)\n    # see http://www.g-mwater.com.au/downloads/gmw/Groundwater/Lower_Campaspe_Valley_WSPA/Nov_2013_-_Lower_Campaspe_Valley_WSPA_Plan_A4_FINAL-fixed_for_web.pdf\n    # esp. Section 2.2 (Groundwater Use) page 8, \n\n    # Groundwater fees: http://www.g-mwater.com.au/downloads/gmw/Forms_Groundwater/2015/TATDOC-2264638-2015-16_Schedule_of_Fees_and_Charges_-_Groundwater_and_Bore_Construction.pdf\n\n    # Entitlement statistics from http://waterregister.vic.gov.au/water-entitlements/entitlement-statistics\n\n    # Other fees not considered:\n    # Bore Construction fee: $1440\n    # Replacement bore: $900\n    # Each Additional bore: $170\n    # licence amendment: $527 (alter number of bores, alter depth of bore, change bore site)\n    # overuse cost: $2000 / ML (we assume that farmers never over use!)\n\n    # Licence Renewal:\n    # Licence renewal occurs every 5-15 years http://www.g-mwater.com.au/downloads/gmw/Forms_Surface_Water/2015/30_Nov_2015_-_2811974-v10-APPLICATION_TO_RENEW_A_LICENCE_TO_TAKE_AND_USE_SURFACEWATER_OPERATE_WORKS.pdf\n    # Licence Renewal costs $681 (based on 2014-15 fees)\n    # $681 / 5 years, which is $136.2 a year\n\n    # In some cases, farmers may need a licence to perform on-farm MAR\n    # See under section entitled \"Managed Aquifer Recharge (MAR)\"\n    # http://www.srw.com.au/page/page.asp?page_Id=113#BM4730\n\n    # Bore Operation Licence is said to be $1414\n    # Could not find whether this is yearly or every 5 years.\n    # Assuming every 5 years\n    # $1414 / 5 is 282.8\n\n    # http://www.g-mwater.com.au/customer-services/manage-my-account/feedescriptions\n    # http://www.g-mwater.com.au/customer-services/manage-my-account/feesandcharges\n    # http://www.g-mwater.com.au/customer-services/manage-my-account/feesandcharges/yourfeesexplained\n    # yearly_cost is the sum of the below\n    # in $ per service point\n    # service,90\n    # service_point,100\n    # access_service_point,50\n    # bore_operation_licence,282.8\n    # licence_renewal,136.2\n    yearly_cost: 659.0\n\n    # No charge based on area\n    cost_per_ha: 0.0\n\n    # Total fees ($ / ML)\n    # access: 3.96\n    # resource_management: 4.33\n    cost_per_ML: 8.29\n\n    head: 0.0  # Initial head\n    allocation: 225.0  # Initial allocation\n    entitlement: 225.0  # Total entitlement\n\n  groundwater:\n    name: groundwater\n    component: WaterSource\n\n    # Surface and Groundwater Account fees: http://www.g-mwater.com.au/downloads/gmw/Pricing_Table_June15.pdf\n    # Supply costs taken from East Loddon (North)\n\n    # Water Share/Entitlements:\n    # http://waterregister.vic.gov.au/water-entitlements/entitlement-statistics\n\n    # 4C Lower Campaspe, 52, 1633.5ML\n    # Pricing:\n    # http://www.g-mwater.com.au/customer-services/myaccount/pricingsimulator\n    # http://www.g-mwater.com.au/general-information/pricingsimulator\n\n    # http://www.g-mwater.com.au/downloads/gmw/Pricing_Table_June15.pdf\n\n    # Definitions:\n    # http://waterregister.vic.gov.au/about/water-dictionary\n\n    # access_fees are sum of the below\n    # in $ per service point\n    # service: 100.0\n    # infrastructure_access: 2714.0\n    # service_point: 300\n    # service_point_remote_read: 350\n    # service_point_remote_operate: 400\n    # surface_drainage_service: 100\n    yearly_cost: 3964.0\n\n    # area_fee ($/Ha): 7.95\n    cost_per_ha:  7.95  # ($/ha)\n\n    # access_fee: 2.04\n    # resource_management_fee: 4.47\n    # high_reliability_entitlement: 24.86\n    # low_reliability_entitlement: 15.35\n    # high_reliability_storage: 10.57\n    # low_reliability_storage: 5.18\n    # above_entitlement_storage: 15.35\n    cost_per_ML: 77.82  # ($/ML)\n\n    head: 25.0  # Initial head (in meters)\n    allocation: 50.0  # Initial allocation\n    entitlement: 50.0  # Total entitlement","category":"page"},{"location":"specs/#Basin","page":"Example Component Specifications","title":"Basin","text":"","category":"section"},{"location":"specs/","page":"Example Component Specifications","title":"Example Component Specifications","text":"name: ExampleBasin\ncomponent: Basin\n\n# Paths to zone specs\nzone_spec: [\"test/data/zones/Zone_1.yml\", \"test/data/zones/Zone_2.yml\"]\n","category":"page"},{"location":"getting_started/#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"The sections below outline basic use of Agtor.","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"A complete runnable script can be found here.","category":"page"},{"location":"getting_started/#A-note-on-terminology","page":"Getting Started","title":"A note on terminology","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Agtor is a zonal agricultural cropping model, where a zone is defined by a collection of fields, and a basin/catchment is defined with a collection of zones.","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Field : An area used for cropping, e.g., a field\nFarmZone  : An arbitrary collection of fields, e.g., a farm or sub-catchment\nBasin : An arbitrary collection of zones, e.g., a catchment","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"In addition, each zone may be assigned a Manager, simulating an actor in charge of determining irrigation schedules and volume of water use.","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Currently available Managers include:","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"EconManager : an \"economically rational\" actor that optimizes for farm profit\nRigidManager : applies a pre-determined volume of water every time step","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Parameters at the field-level may be defined as:","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"RealParameter, inputs that have a range of possible values\nCategoricalParameter, similar to RealParameter except that the range of values relate to specific \"options\"\nConstantParameter, parameters that are held constant for a simulation.","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Note that all dates follow YYYY-mm-dd format, or (mm-dd) if year is not specified.","category":"page"},{"location":"getting_started/#Required-data","page":"Getting Started","title":"Required data","text":"","category":"section"},{"location":"getting_started/#Zones","page":"Getting Started","title":"Zones","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"CSV of climate data for each zone (daily ET and rainfall, assumed daily)\nEstimated Total Available Water for each field's soil type\nInitial soil water deficit for each field","category":"page"},{"location":"getting_started/#Fields","page":"Getting Started","title":"Fields","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Access costs for each water source\nOperational costs of pumping from surface and groundwater\nOperational costs of each irrigation system\nCrop parameters","category":"page"},{"location":"getting_started/#Water-allocations/policy","page":"Getting Started","title":"Water allocations/policy","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Agtor requires a water allocation model to be provided by the user. This can represent a given policy, regional management approach, or other situation.","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"The example function below simply resets the water entitlement for a given zone/watersource on 1 May ((5, 1)) every year.","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"\"\"\"Reallocate water on given date.\n\nExample proxy for a policy model which is called every time step\nfor the given zone.\n\nWater allocations are simply reset at start of season (1 May).\n\"\"\"\nfunction reset_allocation!(zone, dt_i; gs_start=(5, 1))\n    # Resetting allocations for each growing season\n    if monthday(dt_i) == gs_start\n        # Full annual water allocations each year\n        tmp = LittleDict(ws.name=>ws.entitlement for ws in zone.water_sources)\n        t_names = Tuple(Symbol.(collect(keys(tmp))))\n        allocs = NamedTuple{t_names}(collect(values(tmp)))\n\n        update_available_water!(zone, allocs)\n    end\nend","category":"page"},{"location":"getting_started/#Defining-Components","page":"Getting Started","title":"Defining Components","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"All components for Agtor are defined through YAML files which act as the specifications of each component.","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"See Example Component Specifications for an outline of each spec.","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Specifications are loaded from the collection of YAML files as a dictionary. A Basin may therefore be defined directly as a dictionary so long as it follows component specifications as outlined in Example Component Specifications.","category":"page"},{"location":"getting_started/#Example:-Running-scenarios","page":"Getting Started","title":"Example: Running scenarios","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"At the highest level of use, Agtor runs multiple simulations (\"scenarios\").","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"using Agtor\n\n# Load Basin specification from its directory\nbasin_spec_dir = \"examples/campaspe/basin/\"\n\n# A directory may hold specs for multiple basins.\n# Here, we are loading the Campaspe spec (the only one defined in the directory)\nbasin_spec = load_spec(basin_spec_dir)[:Campaspe]\n\n# Extract name and zone specs\nbasin_name = basin_spec[:name]\nzone_specs = basin_spec[:zone_spec]\n\n# Specify location of shared climate data for all zones\nclimate_data = \"examples/campaspe/climate/basin_historic_climate_data.csv\"\n\n# Create an \"economically rational\" manager to be shared by all zones.\n# This manager optimizes returns for the available water, given water needs and costs.\nOptimizingManager = EconManager(\"optimizing\")\n\n# We then assign this manager to all zones defined in the basin spec\n# this associate a set of zones to a given manager by the zone name\n# associate_managers([OptimizingManager], [[:Zone_1, :Zone_2, ..., :Zone_N]])\nmanage_zones = associate_managers([OptimizingManager], [keys(zone_specs)])\n\n# Multiple associations can be created:\n# associate_managers(\n#    [OptimizingManager, RigidManager],\n#    [[:Zone_1, :Zone_2], [:Zone_3, ..., :Zone_N]])\n\n# Final step in the setup is to create the basin by specifying its name, the zones, \n# the climate data and the manager-zone relationship defined above.\ncampaspe_basin = Basin(name=basin_name, zone_spec=zone_specs, \n                       climate_data=climate_data, managers=manage_zones)\n\n# We then create/run scenarios by sampling from possible parameter combinations\n# We use the `Surrogates` package for the sampling:\nagparams = collect_agparams!(campaspe_basin)  # collect all parameters\nsamples = sample(50, agparams[:, :min_val], agparams[:, :max_val], SobolSample())\n\n# Match sampled values with parameter names\ndf = rename!(DataFrame(samples), map(Symbol, agparams[:, :name]))\n\n# Run all defined scenarios\nres = run_scenarios!(df, campaspe_basin; pre=reset_allocation!)","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Note that the example water allocation model was passed into the pre argument. Agtor defines pre and post and in cases functions are supplied, these are run before each time step (in the case of pre) or after each time step (in the case of post).","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Scenario results are held in the form of a dictionary with entries for aggregate zone level results...","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"julia> res\nDict{Any, Any} with 100 entries:\n  \"46/field_results\" => Dict{String, Dict{String, DataFrame}}(\"Zone_5\"=>Dict(\"field1\"=>36×8 DataFrame…\n  \"12/zone_results\"  => Dict{String, DataFrame}(\"Zone_5\"=>36×13 DataFrame…\n\njulia> res[\"1/zone_results\"]\nDict{String, DataFrame} with 12 entries:\n  \"Zone_5\"  => 36×13 DataFrame…\n  \"Zone_2\"  => 36×15 DataFrame…\n  \"Zone_12\" => 36×13 DataFrame…","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"... and results for each field for a given zone. In other words, finer-scale field level results:","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"julia> res[\"1/field_results\"][\"Zone_5\"]\nDict{String, DataFrame} with 1 entry:\n  \"field1\" => 36×8 DataFrame…","category":"page"},{"location":"getting_started/#Example:-Within-scenario/timestep","page":"Getting Started","title":"Example: Within scenario/timestep","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Finer-grain simulations are also possible with Agtor.","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"# Update the zone with some new parameter values if necessary\n# update_model!(zone, some_parameters)\nzone_results, field_results = run_model(OptimizingManager, zone; post=reset_allocation!)\n\n# Run a specific timestep\nrun_timestep!(OptimizingManager, zone, timestep_id, timestep_date);","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"warning: Warning\nIn the case of running a timestep, all time stepping and  data handling is left to the user to specify.See example below.","category":"page"},{"location":"getting_started/#Example-custom-run-function","page":"Getting Started","title":"Example custom run function","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"# Define growing season start as 1 May\nconst gs_start = (5, 1);\n\nfunction run_model(zone)\n    time_sequence = zone.climate.time_steps\n\n    # Example annual water allocations\n    allocs = (surface_water=150.0, groundwater=40.0)\n\n    for (idx, dt_i) in enumerate(time_sequence)\n        run_timestep!(zone.manager, zone, idx, dt_i)\n\n        # Resetting allocations for example run\n        if monthday(dt_i) == gs_start\n            update_available_water!(zone, allocs)\n        end\n    end\n\n    zone_results, field_results = collect_results(zone)\n\n    return zone_results, field_results\nend","category":"page"},{"location":"#Agtor.jl","page":"Agtor.jl","title":"Agtor.jl","text":"","category":"section"},{"location":"","page":"Agtor.jl","title":"Agtor.jl","text":"Agtor is an actor-based zonal agricultural cropping/water management model.","category":"page"},{"location":"#Description","page":"Agtor.jl","title":"Description","text":"","category":"section"},{"location":"","page":"Agtor.jl","title":"Agtor.jl","text":"Agtor is designed to facilitate interdisciplinary exploratory scenario modelling of agricultural systems and related system interactions. Agtor operates at a zonal scale where the zone may represent an individual farm/field, sub-catchment area, or the catchment itself.","category":"page"},{"location":"","page":"Agtor.jl","title":"Agtor.jl","text":"Based on an earlier version developed for the Lower Campaspe region in North-Central Victoria. See this paper.","category":"page"},{"location":"","page":"Agtor.jl","title":"Agtor.jl","text":"Contributions are welcome.","category":"page"},{"location":"#Why-the-name-\"Agtor\"?","page":"Agtor.jl","title":"Why the name \"Agtor\"?","text":"","category":"section"},{"location":"","page":"Agtor.jl","title":"Agtor.jl","text":"The model represents agricultural actors within a system and so the name is a portmandeau of \"agriculture\" and \"actor\".","category":"page"},{"location":"API/#Agtor-API","page":"Agtor API","title":"Agtor API","text":"","category":"section"},{"location":"API/","page":"Agtor API","title":"Agtor API","text":"Modules = [Agtor]\nOrder   = [:type, :function]\nPrivate = false","category":"page"},{"location":"API/#Agtor.Climate","page":"Agtor API","title":"Agtor.Climate","text":"Serves as an interface to climate data\n\n\n\n\n\n","category":"type"},{"location":"API/#Agtor.EconManager","page":"Agtor API","title":"Agtor.EconManager","text":"An 'economically rational' crop farm manager.\n\nWater is applied for optimal farm profitability based on soil water deficit, crop water requirements, and cost of water application.\n\n\n\n\n\n","category":"type"},{"location":"API/#Agtor.Infrastructure","page":"Agtor API","title":"Agtor.Infrastructure","text":"Represents generic farm infrastructure.\n\n\n\n\n\n","category":"type"},{"location":"API/#Agtor.Irrigation","page":"Agtor API","title":"Agtor.Irrigation","text":"On-farm irrigation infrastructure component\n\n\n\n\n\n","category":"type"},{"location":"API/#Agtor.Pump","page":"Agtor API","title":"Agtor.Pump","text":"Pump(pump_efficiency=0.7, cost_per_kW=0.28, derating=0.75)\n\nAn on-farm pump to access water.\n\n\n\n\n\n","category":"type"},{"location":"API/#Agtor.RigidManager","page":"Agtor API","title":"Agtor.RigidManager","text":"A rigid farm manager.\n\nWater is applied by a pre-determined quantity rather than optimal  profitability. Uses surface water first, then groundwater.\n\n\n\n\n\n","category":"type"},{"location":"API/#Agtor.add_prefix!-Tuple{String, Any}","page":"Agtor API","title":"Agtor.add_prefix!","text":"Modify AgParameter name in place by adding a prefix.\n\n\n\n\n\n","category":"method"},{"location":"API/#Agtor.associate_managers-Tuple{Any, Any}","page":"Agtor API","title":"Agtor.associate_managers","text":"associate_managers(managers, zones)\n\nMap a given list of managers to a list of zones.\n\nExample\n\nOptimizingManager = EconManager(\"optimizing\")\nmanage_zones = associate_managers([OptimizingManager], [[:Zone_1, :Zone_2]])\n\nArguments\n\nmanagers : list-like, of managers\nzones : list-like of a list of zone names to associate a manager with\n\nReturns\n\nTuple of tuples of managers and the names of zones they manage\n\n\n\n\n\n","category":"method"},{"location":"API/#Agtor.collate_results!-Tuple{String, String}","page":"Agtor API","title":"Agtor.collate_results!","text":"collate_results!(fn_pattern::String, main_fn::String)::Nothing\n\nCollate individually saved .jld2 files from distributed runs into a single JLD2 file.\n\n\n\n\n\n","category":"method"},{"location":"API/#Agtor.collate_results-Tuple{String, String, Array{String}}","page":"Agtor API","title":"Agtor.collate_results","text":"collate_results(fn::String, group::String, target::Array{String})::DataFrame\ncollate_results(data::Dict, group::String, target::Array{String})::DataFrame\ncollate_results(fn::String, group::String, target::String)::DataFrame\ncollate_results(data::Dict, group::String, target::String)::DataFrame\n\nCollate a results from across scenario runs into an individual DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API/#Agtor.collect_agparams!-Tuple{Dict, Dict}","page":"Agtor API","title":"Agtor.collect_agparams!","text":"collect_agparams!(dataset::Dict, mainset::Dict)::Nothing\n\nExtract parameter values from Dict specification and store in a common Dict.\n\n\n\n\n\n","category":"method"},{"location":"API/#Agtor.collect_agparams!-Tuple{Union{AgComponent, AgParameter}, Array}","page":"Agtor API","title":"Agtor.collect_agparams!","text":"Extract parameter values from AgComponent.\n\n\n\n\n\n","category":"method"},{"location":"API/#Agtor.collect_agparams!-Tuple{Union{Tuple, Array}, Array}","page":"Agtor API","title":"Agtor.collect_agparams!","text":"collect_agparams!(dataset::Union{Array, Tuple}, store::Array; ignore::Union{Array, Nothing}=nothing)::Nothing\ncollect_agparams!(dataset::Dict, store::Array; ignore::Union{Array, Nothing}=nothing)::DataFrame\n\n\n\n\n\n","category":"method"},{"location":"API/#Agtor.collect_agparams-Tuple{Dict}","page":"Agtor API","title":"Agtor.collect_agparams","text":"collect_agparams(dataset::Dict; ignore::Union{Array, Nothing}=nothing)::DataFrame\n\nExtract parameter values from Dict specification.\n\n\n\n\n\n","category":"method"},{"location":"API/#Agtor.collect_results-Tuple{Basin}","page":"Agtor API","title":"Agtor.collect_results","text":"Collect model run results for a Basin\n\n\n\n\n\n","category":"method"},{"location":"API/#Agtor.collect_results-Tuple{FarmZone}","page":"Agtor API","title":"Agtor.collect_results","text":"Collect model run results for a FarmZone\n\n\n\n\n\n","category":"method"},{"location":"API/#Agtor.component_relationship-Tuple{DataFrames.DataFrame}","page":"Agtor API","title":"Agtor.component_relationship","text":"Create relational mapping between components and values.\n\n\n\n\n\n","category":"method"},{"location":"API/#Agtor.extract_values-Tuple{AgParameter}","page":"Agtor API","title":"Agtor.extract_values","text":"Extract parameter values from AgParameter\n\n\n\n\n\n","category":"method"},{"location":"API/#Agtor.generate_agparams-Tuple{Union{String, Symbol}, Dict}","page":"Agtor API","title":"Agtor.generate_agparams","text":"Generate AgParameter definitions.\n\nArguments\n\nprefix : str\ndataset : Dict, of parameters for given component\n\nReturns\n\nDict matching structure of dataset\n\n\n\n\n\n","category":"method"},{"location":"API/#Agtor.min_max-Tuple{AgParameter}","page":"Agtor API","title":"Agtor.min_max","text":"min_max(p::AgParameter)\nmin_max(dataset::Dict)::Dict\n\nReturns min/max of parameter values.\n\n\n\n\n\n","category":"method"},{"location":"API/#Agtor.run_model-Tuple{Basin}","page":"Agtor API","title":"Agtor.run_model","text":"Run scenario for an entire basin.\n\n\n\n\n\n","category":"method"},{"location":"API/#Agtor.run_model-Tuple{FarmZone}","page":"Agtor API","title":"Agtor.run_model","text":"run_model(zone::FarmZone; ts_func::Function=run_timestep!, pre::Union{Function, Nothing}=nothing, post::Union{Function, Nothing}=nothing)::NamedTuple\n\nRun model for a single zone.\n\nArguments\n\nzone : Zone AgComponent\ntsfunc : Function, defining actions for a time step.       Must accept a Manager, zone, int, and Date/DateTime       `tsfunc(manager, zone, idx, dt)`       All operations must be in-place as changes will not propagate.\npre : Function, defines additional actions for zone that occur        at end of time step dt_i:       callback_func(zone, dt_i)\npost : Function, defines additional actions for zone that occur         at end of time step dt_i:        callback_func(zone, dt_i)\n\nReturns\n\nNamedTuple : results\n\n\n\n\n\n","category":"method"},{"location":"API/#Agtor.run_scenarios!-Tuple{DataFrames.DataFrame, Basin}","page":"Agtor API","title":"Agtor.run_scenarios!","text":"run_scenarios!(samples::DataFrame, basin::Basin, ts_func::Function; \n               pre::Union{Function, Nothing}=nothing, post::Union{Function, Nothing}=nothing)::Dict\n\nRun basin level scenarios for a given sample set.\n\nReturns\n\nDict with keys:   \"scenarioid/zoneresults\" = zone level results for each zone in basin   \"scenarioid/fieldresults\" = field level results for each zone in basin\n\n\n\n\n\n","category":"method"},{"location":"API/#Agtor.run_scenarios!-Tuple{DataFrames.DataFrame, FarmZone}","page":"Agtor API","title":"Agtor.run_scenarios!","text":"run_scenarios!(samples::DataFrame, zone::FarmZone; ts_func::Function=run_timestep!,\n               pre::Union{Function, Nothing}=nothing, post::Union{Function, Nothing}=nothing)::Dict\n\nRun zone level scenarios for a given sample set.\n\nReturns\n\nDict with keys:     - \"scenarioid/zoneresults\" = zone level results     - \"scenarioid/fieldresults\" = field level results\n\n\n\n\n\n","category":"method"},{"location":"API/#Agtor.run_timestep!-Tuple{Basin, Any}","page":"Agtor API","title":"Agtor.run_timestep!","text":"Run timestep for all zones within a basin.\n\n\n\n\n\n","category":"method"},{"location":"API/#Agtor.save_results!-NTuple{5, Any}","page":"Agtor API","title":"Agtor.save_results!","text":"Save results for a scenario, basin, and zone combination\n\n\n\n\n\n","category":"method"},{"location":"API/#Agtor.save_results!-Tuple{String, Any, Tuple{String, String}}","page":"Agtor API","title":"Agtor.save_results!","text":"Save arbitrary results to JLD.\n\n\n\n\n\n","category":"method"},{"location":"API/#Agtor.save_results!-Tuple{String, Dict}","page":"Agtor API","title":"Agtor.save_results!","text":"Save results to JLD2.\n\nExample\n\noutput_fn = \"example.jld2\"\nresults = run_scenarios!(samples, z1, run_timestep!; post=allocation_callback!)\nsave_results!(output_fn, results)\n\n\n\n\n\n","category":"method"},{"location":"API/#Agtor.save_results!-Tuple{String, NamedTuple}","page":"Agtor API","title":"Agtor.save_results!","text":"Save arbitrary results to JLD.\n\n\n\n\n\n","category":"method"},{"location":"API/#Agtor.save_results!-Tuple{String, Union{Int64, String}, NamedTuple}","page":"Agtor API","title":"Agtor.save_results!","text":"Save results for a single zone to JLD.\n\n\n\n\n\n","category":"method"},{"location":"API/#Agtor.save_state!-Tuple{String, Any, String}","page":"Agtor API","title":"Agtor.save_state!","text":"Save state to JLD\n\n\n\n\n\n","category":"method"},{"location":"API/#Agtor.scenario_stats-Tuple{DataFrames.DataFrame, String}","page":"Agtor API","title":"Agtor.scenario_stats","text":"Get aggregate statistics for an entire scenario run.\n\n\n\n\n\n","category":"method"},{"location":"API/#Agtor.select_results-Tuple{DataFrames.DataFrame, String}","page":"Agtor API","title":"Agtor.select_results","text":"Filter DataFrame down to a subset of results based on partial column name match.\n\n\n\n\n\n","category":"method"},{"location":"API/#Agtor.set_params!-Tuple{Any, Any}","page":"Agtor API","title":"Agtor.set_params!","text":"set_params!(comp, sample)\nset_params!(comp::Array, sample)::Nothing\nset_params!(comp::Dict, sample)::Nothing\nset_params!(p::AgParameter, sample::Union{DataFrame, DataFrameRow})::Nothing\nset_params!(p::AgParameter, sample::Union{Number, String})::Nothing\nset_params!(p::AgParameter, sample::Union{Dict, NamedTuple})::Nothing\n\nNote\n\nupdate_model!(comp, sample) is an alias for set_params!(comp, sample)\n\nExample\n\nzone_dir = \"data_dir/zones/\"\nzone_specs = load_yaml(zone_dir)\nzone_params = generate_agparams(\"\", zone_specs[\"Zone_1\"])\n\ncollated_specs = []\ncollect_agparams!(zone_params, collated_specs; ignore=[\"crop_spec\"])\n\n# Expect only CSV for now...\nclimate_fn::String = \"data/climate/farm_climate_data.csv\"\nclimate::Climate = load_climate(climate_fn)\nz1 = create(zone_params, climate)\n\nparam_info = DataFrame(collated_specs)\n\n# Generate dataframe of samples\nsamples = sample(param_info, 1000, sampler)  # where sampler is some function\n\n# Update z1 components with values found in first row\nset_params!(z1, samples[1, :])\n\n\n\n\n\n","category":"method"},{"location":"API/#Agtor.subtotal_costs-Tuple{Irrigation, Int64}","page":"Agtor API","title":"Agtor.subtotal_costs","text":"Calculate sub-total of irrigation costs\n\n\n\n\n\n","category":"method"},{"location":"API/#Agtor.total_costs","page":"Agtor API","title":"Agtor.total_costs","text":"Calculate total costs for a field.\n\nMaintenance costs can be spread out across a number of fields if desired.\n\n\n\n\n\n","category":"function"},{"location":"API/#Agtor.update_available_water!-Tuple{FarmZone, NamedTuple}","page":"Agtor API","title":"Agtor.update_available_water!","text":"Update water allocations\n\n\n\n\n\n","category":"method"},{"location":"API/#Agtor.water_used_by_source-Tuple{FarmZone}","page":"Agtor API","title":"Agtor.water_used_by_source","text":"water_used_by_source(zone::FarmZone)::DataFrame\nwater_used_by_source(zone::FarmZone, dt)::DataFrame\n\nIdentify source of water used by a zone.\n\n\n\n\n\n","category":"method"}]
}
