var documenterSearchIndex = {"docs":
[{"location":"#Agtor.jl-Documentation","page":"Agtor.jl Documentation","title":"Agtor.jl Documentation","text":"","category":"section"},{"location":"","page":"Agtor.jl Documentation","title":"Agtor.jl Documentation","text":"CurrentModule = Agtor\r\nDocTestSetup = quote\r\n    using Agtor\r\nend","category":"page"},{"location":"","page":"Agtor.jl Documentation","title":"Agtor.jl Documentation","text":"Modules = [Agtor]\r\nOrder   = [:type, :function]","category":"page"},{"location":"#Agtor.BaseManager","page":"Agtor.jl Documentation","title":"Agtor.BaseManager","text":"An 'economically rational' crop farm manager.\n\nWater is applied for optimal farm profitability based on soil water deficit, crop water requirements, and cost of water application.\n\n\n\n\n\n","category":"type"},{"location":"#Agtor.CategoricalParameter","page":"Agtor.jl Documentation","title":"Agtor.CategoricalParameter","text":"Categorical parameters.\n\nMin and max values will map to (integer) element position in an CategoricalArray.\n\nSampling between the min and max values will be mapped to their categorical value in the given array\nusing `floor()` of the Float value `x`.\n\nValid values for the CategoricalParameter will therefore be: \n`1 <= x < (n+1)`, where n is number of options.\n\n\n\n\n\n","category":"type"},{"location":"#Agtor.Climate","page":"Agtor.jl Documentation","title":"Agtor.Climate","text":"Serves as an interface to climate data\n\n\n\n\n\n","category":"type"},{"location":"#Agtor.Infrastructure","page":"Agtor.jl Documentation","title":"Agtor.Infrastructure","text":"Represents generic farm infrastructure.\n\n\n\n\n\n","category":"type"},{"location":"#Agtor.Irrigation","page":"Agtor.jl Documentation","title":"Agtor.Irrigation","text":"On-farm irrigation infrastructure component\n\n\n\n\n\n","category":"type"},{"location":"#Agtor.Pump","page":"Agtor.jl Documentation","title":"Agtor.Pump","text":"Pump(pump_efficiency=0.7, cost_per_kW=0.28, derating=0.75)\n\nAn on-farm pump to access water.\n\n\n\n\n\n","category":"type"},{"location":"#Agtor.RigidManager","page":"Agtor.jl Documentation","title":"Agtor.RigidManager","text":"A rigid farm manager.\n\nWater is applied by a pre-determined quantity rather than optimal  profitability. Uses surface water first, then groundwater.\n\n\n\n\n\n","category":"type"},{"location":"#Agtor.ML_water_application_cost-Tuple{Manager,FarmZone,FarmField,Float64}","page":"Agtor.jl Documentation","title":"Agtor.ML_water_application_cost","text":"ML_water_application_cost(m::Manager, zone::FarmZone, field::FarmField, req_water_ML_ha::Float64)::NamedTuple\n\nCalculate water application cost/ML by each water source.\n\nReturns\n\nNamedTuple[str, float] : water source name and cost per ML\n\n\n\n\n\n","category":"method"},{"location":"#Agtor.add_prefix!-Tuple{String,Any}","page":"Agtor.jl Documentation","title":"Agtor.add_prefix!","text":"Modify AgParameter name in place by adding a prefix.\n\n\n\n\n\n","category":"method"},{"location":"#Agtor.apply_irrigation!-Tuple{CropField,WaterSource,Float64,Float64}","page":"Agtor.jl Documentation","title":"Agtor.apply_irrigation!","text":"Apply irrigation water to field\n\n\n\n\n\n","category":"method"},{"location":"#Agtor.apply_rainfall!-Tuple{FarmZone,Dates.Date}","page":"Agtor.jl Documentation","title":"Agtor.apply_rainfall!","text":"Apply rainfall and ET to influence soil water deficit.\n\n\n\n\n\n","category":"method"},{"location":"#Agtor.apply_rainfall!-Tuple{FarmZone,Int64}","page":"Agtor.jl Documentation","title":"Agtor.apply_rainfall!","text":"Apply rainfall and ET to influence soil water deficit.\n\n\n\n\n\n","category":"method"},{"location":"#Agtor.assign_managers!-Tuple{Any,Any}","page":"Agtor.jl Documentation","title":"Agtor.assign_managers!","text":"Example:\n\n# Load zone specifications\nzone_specs = load_spec(\"test/data/zones\")\n\n# Define managers of interest\nManager_A = BaseManager(\"optimizing\")\nManager_B = RigidManager(\"rigid\", 0.05)\n\n# Create tuple-based relation between managers and zones (by name)\nmanage_zones = ((Manager_A, (\"Zone_1\", )), (Manager_B, (\"Zone_2\", \"Zone_3\")))\n\n# Attach managers to their associated zones\nassign_managers!(manage_zones, values(zone_specs))\n\nRaises ArgumentError if duplicate zone names are found.\n\n\n\n\n\n","category":"method"},{"location":"#Agtor.calc_ML_pump_costs-Tuple{Manager,FarmZone,Float64}","page":"Agtor.jl Documentation","title":"Agtor.calc_ML_pump_costs","text":"Calculate pumping costs (per ML) for each water source.\n\nParameters\n\nm : manager component\nzone : FarmZone\nflowrateLps : float, desired flow rate in Litres per second.\n\nReturns\n\ndict[str, float] : cost of pumping per ML for each water source\n\n\n\n\n\n","category":"method"},{"location":"#Agtor.calc_potential_crop_yield-Tuple{Float64,Float64,AgComponent}","page":"Agtor.jl Documentation","title":"Agtor.calc_potential_crop_yield","text":"calc_potential_crop_yield(ssm_mm::Float64, gsr_mm::Float64, crop::AgComponent)\n\nPotential crop yield calculation based on a modified French-Schultz equation. The implemented method is the farmer-friendly version as described by  Oliver et al., (2008) (see [1]).\n\nYP = (SSM + GSR - E) * WUE\n\nwhere\n\nYP is yield potential in tonnes per hectare\nSSM is Stored Soil Moisture (at start of season) in mm, assumed to be 30% of summer rainfall\nGSR is Growing Season Rainfall in mm\nE is Crop Evaporation coefficient in mm, the amount of rainfall required before the crop will start   to grow, commonly 110mm, but can range from 30-170mm (see [2]),\nWUE is Water Use Efficiency coefficient in kg/mm\n\nReferences\n\nOliver et al. (2008) (see Equation 1)\nWhitbread and Hancock (2008)\n\nParameters\n\nssm_mm : float, Stored Soil Moisture (mm) at start of season.\ngsr_mm : float, Growing Season Rainfall (mm)\ncrop : object, Crop component object\n\nReturns\n\nPotential yield in tonnes/Ha\n\n\n\n\n\n","category":"method"},{"location":"#Agtor.calc_required_water-Tuple{FarmField,Dates.Date}","page":"Agtor.jl Documentation","title":"Agtor.calc_required_water","text":"calc_required_water(f::FarmField, dt::Date)\n\nVolume of water to maintain moisture above net irrigation depth (nid).\n\nCalculates volume of water needed to replenish soil water deficit (swd) when SWD falls below nid, considering irrigation efficiency.\n\nValues are given in mm.\n\nlink to nid(f::FarmField, dt::Date)\n\n\n\n\n\n","category":"method"},{"location":"#Agtor.collate_field_logs-Tuple{Dict}","page":"Agtor.jl Documentation","title":"Agtor.collate_field_logs","text":"Collate logged values, aggregating to the zonal level based on identical datetimes.\n\n\n\n\n\n","category":"method"},{"location":"#Agtor.collate_field_logs-Tuple{FarmZone,Symbol}","page":"Agtor.jl Documentation","title":"Agtor.collate_field_logs","text":"Collate logged values, summing on identical datetimes\n\n\n\n\n\n","category":"method"},{"location":"#Agtor.collate_field_logs-Tuple{FarmZone}","page":"Agtor.jl Documentation","title":"Agtor.collate_field_logs","text":"Collate logged values, aggregating to the zonal level based on identical datetimes.\n\n\n\n\n\n","category":"method"},{"location":"#Agtor.collect_agparams!","page":"Agtor.jl Documentation","title":"Agtor.collect_agparams!","text":"Extract parameter values from AgComponent.\n\n\n\n\n\n","category":"function"},{"location":"#Agtor.collect_agparams-Tuple{Dict}","page":"Agtor.jl Documentation","title":"Agtor.collect_agparams","text":"Extract parameter values from Dict specification.\n\n\n\n\n\n","category":"method"},{"location":"#Agtor.collect_results-Tuple{FarmZone}","page":"Agtor.jl Documentation","title":"Agtor.collect_results","text":"Collect model run results for a FarmZone\n\n\n\n\n\n","category":"method"},{"location":"#Agtor.ensure_date-Tuple{Climate,String,String}","page":"Agtor.jl Documentation","title":"Agtor.ensure_date","text":"Converts strings to datetime.\n\n\n\n\n\n","category":"method"},{"location":"#Agtor.estimate_income_per_ha-Tuple{Crop}","page":"Agtor.jl Documentation","title":"Agtor.estimate_income_per_ha","text":"Naive estimation of net income.\n\n\n\n\n\n","category":"method"},{"location":"#Agtor.extract_values-Tuple{AgParameter}","page":"Agtor.jl Documentation","title":"Agtor.extract_values","text":"Extract parameter values from AgParameter\n\n\n\n\n\n","category":"method"},{"location":"#Agtor.generate_agparams-Tuple{Union{String, Symbol},Dict}","page":"Agtor.jl Documentation","title":"Agtor.generate_agparams","text":"Generate AgParameter definitions.\n\nParameters\n\nprefix : str\n\ndataset : Dict, of parameters for given component\n\nReturns\n\nDict matching structure of dataset\n\n\n\n\n\n","category":"method"},{"location":"#Agtor.get_optimum_irrigated_area-Tuple{FarmField,OrderedCollections.OrderedDict}","page":"Agtor.jl Documentation","title":"Agtor.get_optimum_irrigated_area","text":"Extract total irrigated area from OptLang optimized results.\n\n\n\n\n\n","category":"method"},{"location":"#Agtor.get_season_range-Tuple{Climate,Dates.Date,Dates.Date}","page":"Agtor.jl Documentation","title":"Agtor.get_season_range","text":"Gets climate data for season range.\n\nParameters\n\np_start : datetime, start of range in Y-m-d format, inclusive.\np_end : datetime, end of range in Y-m-d format, inclusive.\n\n\n\n\n\n","category":"method"},{"location":"#Agtor.get_seasonal_et-Tuple{Climate,Array{Dates.Date,N} where N,String}","page":"Agtor.jl Documentation","title":"Agtor.get_seasonal_et","text":"Retrieve seasonal evapotranspiration.\n\nParameters\n\nseason_range : List-like, start and end dates, can be string or datetime object\npartial_name : str, string to (partially) match column name identifier on\n\nReturns\n\nnumeric of seasonal rainfall\n\n\n\n\n\n","category":"method"},{"location":"#Agtor.get_seasonal_rainfall-Tuple{Climate,Array{Dates.Date,N} where N,String}","page":"Agtor.jl Documentation","title":"Agtor.get_seasonal_rainfall","text":"Retrieve seasonal rainfall by matching column name.  Columns names are expected to have 'rainfall' with some identifier.\n\nParameters\n\nseason_range : List-like, start and end dates, can be string or datetime object\npartial_name : str, string to (partially) match column name identifier on\n\nExample\n\nWhere column names are: 'rainfallfield1', 'rainfallfield2', ...\n\nget_seasonal_rainfall(c, ['1981-01-01', '1982-06-01'], 'field1')\n\nReturns\n\nnumeric, representing seasonal rainfall\n\n\n\n\n\n","category":"method"},{"location":"#Agtor.in_season-Tuple{Dates.Date,Dates.Date,Dates.Date}","page":"Agtor.jl Documentation","title":"Agtor.in_season","text":"Check to see if given date is between start and end dates (exclusive of start and end)\n\n\n\n\n\n","category":"method"},{"location":"#Agtor.irrigated_area-Tuple{FarmZone}","page":"Agtor.jl Documentation","title":"Agtor.irrigated_area","text":"The total area marked for irrigation.\n\n\n\n\n\n","category":"method"},{"location":"#Agtor.is_const-Tuple{AgParameter}","page":"Agtor.jl Documentation","title":"Agtor.is_const","text":"Checks if parameter is constant.\n\n\n\n\n\n","category":"method"},{"location":"#Agtor.log_irrigation_by_water_source-Tuple{FarmZone,FarmField,Dates.Date}","page":"Agtor.jl Documentation","title":"Agtor.log_irrigation_by_water_source","text":"Log irrigation volumes from water sources\n\n\n\n\n\n","category":"method"},{"location":"#Agtor.log_irrigation_cost-Tuple{FarmField,Float64}","page":"Agtor.jl Documentation","title":"Agtor.log_irrigation_cost","text":"Log the (total) cost of irrigation.\n\n\n\n\n\n","category":"method"},{"location":"#Agtor.maintenance_cost-Tuple{Infrastructure,Int64}","page":"Agtor.jl Documentation","title":"Agtor.maintenance_cost","text":"Calculate maintenance costs.\n\nWarning: This can be on a per hectare basis or given as a total.\n\n\n\n\n\n","category":"method"},{"location":"#Agtor.matching_dates-Tuple{Dates.Date,Dates.Date}","page":"Agtor.jl Documentation","title":"Agtor.matching_dates","text":"Check to see if two dates are identical\n\n\n\n\n\n","category":"method"},{"location":"#Agtor.min_max-Tuple{AgParameter}","page":"Agtor.jl Documentation","title":"Agtor.min_max","text":"Returns min/max values\n\n\n\n\n\n","category":"method"},{"location":"#Agtor.min_max-Tuple{Dict}","page":"Agtor.jl Documentation","title":"Agtor.min_max","text":"Returns min/max values\n\n\n\n\n\n","category":"method"},{"location":"#Agtor.nid-Tuple{FarmField,Dates.Date}","page":"Agtor.jl Documentation","title":"Agtor.nid","text":"nid(f::FarmField, dt::Date)\n\nCalculate net irrigation depth in mm, 0.0 or above.\n\nEquation taken from Agriculture Victoria\n\nSee also:\n\nhttp://www.fao.org/docrep/x5560e/x5560e03.htm\nhttps://www.bae.ncsu.edu/programs/extension/evans/ag452-1.html\nhttp://dpipwe.tas.gov.au/Documents/Soil-waterfactsheet14122011a.pdf\nhttps://www.agric.wa.gov.au/water-management/calculating-readily-available-water?nopaging=1\n\nNID = Effective root depth (D_rz) * Readily Available Water (RAW)\n\nwhere:\n\nD_rz = Crop_root depth * Crop_e_rz, where Crop_root depth  is the estimated root depth for current stage of crop (initial, late, etc.)  and Crop_e rz is the effective root zone coefficient for the crop.\nCrop_e rz is said to be between 1 and 2/3rds of total root depth\nRAW = p * TAW, p is depletion fraction of crop, TAW is  Total Available Water in Soil\n\nAs an example, if a crop has a root depth (RD_r) of 1m, an effective  root zone (RD_erz) coefficient of 0.55, a depletion fraction (p) of 0.4  and the soil has a TAW of 180mm:\n\n(RD_r * RD_erz) * (p * TAW)\n\nWorks out to be:\n\n(1 * 055) * (04 * 180)\n\nReturns\n\n* float : net irrigation depth\n\n\n\n\n\n","category":"method"},{"location":"#Agtor.optimize_irrigated_area-Tuple{Manager,FarmZone}","page":"Agtor.jl Documentation","title":"Agtor.optimize_irrigated_area","text":"Apply Linear Programming to naively optimize irrigated area.\n\nOccurs at start of season.\n\nParameters\n\nm : Agtor.Manager, \nzone : Agtor.FarmZone, representing a farm or a farming zone.\n\n\n\n\n\n","category":"method"},{"location":"#Agtor.optimize_irrigation-Tuple{Manager,FarmZone,Dates.Date}","page":"Agtor.jl Documentation","title":"Agtor.optimize_irrigation","text":"optimize_irrigation(m::Manager, zone::FarmZone, dt::Date)::Tuple{OrderedDict, NamedTuple}\n\nApply Linear Programming to optimize irrigation water use.\n\nResults can be used to represent percentage mix e.g. if the field area is 100 ha, and the optimal area to be         irrigated by a water source is\n\nSW: 70 ha\nGW: 30 ha\n\nand the required amount is 20mm\n\nSW: 70 / 100 = 0.7 (irrigated area / total area, 70%)\nGW: 30 / 100 = 0.3 (30%)\n\nThen the per hectare amount to be applied from each  water source is calculated as:\n\nSW = 20mm * 0.7\n   = 14mm\n\nGW = 20mm * 0.3\n   = 6mm\n\nParameters\n\nzone : FarmZone\ndt : datetime object, current datetime\n\nReturns\n\nTuple : OrderedDict[str, float]          keys based on field and water source names values are hectare area         Float : /ML cost of applying water\n\n\n\n\n\n","category":"method"},{"location":"#Agtor.perc_irrigation_sources-Tuple{Manager,FarmField,Array,Dict}","page":"Agtor.jl Documentation","title":"Agtor.perc_irrigation_sources","text":"Calculate percentage of area to be watered by a specific water source.\n\nReturns\n\nDict[str, float] : name of water source as key and percent area as value\n\n\n\n\n\n","category":"method"},{"location":"#Agtor.possible_area_by_allocation-Tuple{FarmZone,FarmField,Float64}","page":"Agtor.jl Documentation","title":"Agtor.possible_area_by_allocation","text":"Determine the possible irrigation area using water from each water source.\n\n\n\n\n\n","category":"method"},{"location":"#Agtor.possible_irrigation_area-Tuple{FarmField,Float64,Float64}","page":"Agtor.jl Documentation","title":"Agtor.possible_irrigation_area","text":"Possible irrigation area in hectares.\n\n\n\n\n\n","category":"method"},{"location":"#Agtor.pumping_costs_per_ML-Tuple{Pump,Float64,Float64}","page":"Agtor.jl Documentation","title":"Agtor.pumping_costs_per_ML","text":"pumping_costs_per_ML(p::Pump, flow_rate_Lps::Float64, head_pressure::Float64)::Float64\n\nCalculate pumping cost per ML for a given flow rate and head pressure.\n\nP(Kw) = (H * Q)  ((102 * Ep) * D)\n\nwhere:\n\nH is head pressure in metres (m)\nQ is Flow in Litres per Second\nEp is Pump efficiency (defaults to 0.7)\nD is the derating factor\n102 is a constant, as given in Velloti & Kalogernis (2013)\n\nSee:     * Robinson, D. W. (2002)     * Vic. Dept. Agriculture (2006)     * Vellotti & Kalogernis (2013)\n\nParameters\n\nflow_rate_Lps : required flow rate in Litres per second over the irrigation duration\n\nhead_pressure : Head pressure of pumping system in metres.\n\nParameters taken from Pump\n\npump_efficiency : Efficiency of pump. Defaults to 0.7 (70%)\n\nderating : Accounts for efficiency losses between the energy required at the pump                     shaft and the total energy required. Defaults to 0.75\n\nReturns\n\nfloat, costperML\n\nlink to Pump(pump_efficiency, cost_per_kW, derating)\n\n\n\n\n\n","category":"method"},{"location":"#Agtor.save_results!-NTuple{5,Any}","page":"Agtor.jl Documentation","title":"Agtor.save_results!","text":"Save results for a scenario, basin, and zone combination\n\n\n\n\n\n","category":"method"},{"location":"#Agtor.save_results!-Tuple{Any,Dict}","page":"Agtor.jl Documentation","title":"Agtor.save_results!","text":"Save results for a single zone to JLD.\n\n\n\n\n\n","category":"method"},{"location":"#Agtor.save_results!-Tuple{String,String,Tuple}","page":"Agtor.jl Documentation","title":"Agtor.save_results!","text":"Save results for a single zone to JLD.\n\n\n\n\n\n","category":"method"},{"location":"#Agtor.seasonal_field_log!-Tuple{FarmField,Dates.Date,Float64,Float64,Float64,Float64,Float64}","page":"Agtor.jl Documentation","title":"Agtor.seasonal_field_log!","text":"Log seasonal results.\n\n\n\n\n\n\n\n","category":"method"},{"location":"#Agtor.set_next_crop!-Tuple{Manager,FarmField,Dates.Date}","page":"Agtor.jl Documentation","title":"Agtor.set_next_crop!","text":"Sets next crop in rotation and updates sowing/planting dates.\n\n\n\n\n\n","category":"method"},{"location":"#Agtor.set_params!-Tuple{Any,Any}","page":"Agtor.jl Documentation","title":"Agtor.set_params!","text":"Usage:     zonedir = \"datadir/zones/\"     zonespecs = loadyaml(zonedir)     zoneparams = generateagparams(\"\", zonespecs[\"Zone_1\"])\n\ncollated_specs = []\ncollect_agparams!(zone_params, collated_specs; ignore=[\"crop_spec\"])\n\n# Expect only CSV for now...\nclimate_fn::String = \"data/climate/farm_climate_data.csv\"\nclimate::Climate = load_climate(climate_fn)\nz1 = create(zone_params, climate)\n\nparam_info = DataFrame(collated_specs)\n\n# Generate dataframe of samples\nsamples = sample(param_info, 1000, sampler)  # where sampler is some function\n\n# Update z1 components with values found in first row\nset_params!(z1, samples[1])\n\n\n\n\n\n","category":"method"},{"location":"#Agtor.total_costs","page":"Agtor.jl Documentation","title":"Agtor.total_costs","text":"Calculate total costs for a field.\n\nMaintenance costs can be spread out across a number of fields if desired.\n\n\n\n\n\n","category":"function"},{"location":"#Agtor.total_income-Tuple{FarmField,Float64,Float64,Float64,Any}","page":"Agtor.jl Documentation","title":"Agtor.total_income","text":"total_income(f::FarmField, ssm::Float64, gsr::Float64, irrig::Float64, comps)::Tuple\n\nCalculate net income considering crop yield and costs incurred.\n\nReturns\n\nTuple:\n    * float : net income\n    * float : irrigated crop yield, tonnes/Ha\n    * float : dryland crop yield, tonnes/Ha\n\n\n\n\n\n","category":"method"},{"location":"#Agtor.update_SWD!-Tuple{FarmField,Float64,Float64}","page":"Agtor.jl Documentation","title":"Agtor.update_SWD!","text":"update_SWD!(f::FarmField, rainfall::Float64, ET::Float64)\n\nCalculate soil water deficit.\n\nWater deficit is represented as positive values.\n\nrainfall and ET parameters are expected in mm\n\n\n\n\n\n","category":"method"},{"location":"#Agtor.update_available_water!-Tuple{FarmZone,NamedTuple}","page":"Agtor.jl Documentation","title":"Agtor.update_available_water!","text":"Update water allocations\n\n\n\n\n\n","category":"method"},{"location":"#Agtor.update_stages!-Tuple{Crop,Dates.Date}","page":"Agtor.jl Documentation","title":"Agtor.update_stages!","text":"Update growth stages with corresponding dates from given sowing date.\n\n\n\n\n\n","category":"method"},{"location":"#Agtor.use_allocation!-Tuple{WaterSource,Float64}","page":"Agtor.jl Documentation","title":"Agtor.use_allocation!","text":"Use allocation volume from a particular water source.\n\nVolumes in ML.\n\n\n\n\n\n","category":"method"},{"location":"#Agtor.value_range-Tuple{AgParameter}","page":"Agtor.jl Documentation","title":"Agtor.value_range","text":"Returns max - min, or 0.0 if no min value defined\n\n\n\n\n\n","category":"method"},{"location":"#Agtor.volume_used_by_source-Tuple{FarmField,String}","page":"Agtor.jl Documentation","title":"Agtor.volume_used_by_source","text":"Volume used from a water source in ML\n\n\n\n\n\n","category":"method"},{"location":"#Base.getproperty-Tuple{FarmField,Symbol}","page":"Agtor.jl Documentation","title":"Base.getproperty","text":"Getter for Field\n\n\n\n\n\n","category":"method"},{"location":"#Base.getproperty-Tuple{Irrigation,Symbol}","page":"Agtor.jl Documentation","title":"Base.getproperty","text":"Getters for Irrigation\n\n\n\n\n\n","category":"method"},{"location":"#Base.setproperty!-Tuple{Agtor.CategoricalParameter,Symbol,Any}","page":"Agtor.jl Documentation","title":"Base.setproperty!","text":"Setter for CategoricalParameter to handle float to categorical element position.\n\n\n\n\n\n","category":"method"},{"location":"#Base.setproperty!-Tuple{FarmField,Symbol,Any}","page":"Agtor.jl Documentation","title":"Base.setproperty!","text":"Setter for Field\n\n\n\n\n\n","category":"method"},{"location":"","page":"Agtor.jl Documentation","title":"Agtor.jl Documentation","text":"","category":"page"}]
}
